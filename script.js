document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("chat-form");
  const input = document.getElementById("user-input");
  const log = document.getElementById("chat-log");
  const downloadButton = document.getElementById("download-button");

  let typingInterval = null;
  let thinkingBubble = null;
  let stopTyping = false;
  let messageCount = 0;
  const messageHistory = [];

  input.addEventListener("input", () => {
    input.style.height = "auto";
    input.style.height = input.scrollHeight + "px";
  });

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      form.dispatchEvent(new Event("submit"));
    }
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const userMessage = input.value.trim();
    if (!userMessage) return;

    appendMessage("You", userMessage, true);
    messageHistory.push({ role: "user", content: userMessage });

    input.value = "";
    input.style.height = "auto";
    stopTyping = false;
    messageCount++;

    showThinkingBubble();

    const response = await fetch("https://product-dev-chat-production.up.railway.app/api/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: userMessage, history: messageHistory }),
    });

    const data = await response.json();
    removeThinkingBubble();
    appendMessage("Navigator", data.reply);
    messageHistory.push({ role: "assistant", content: data.reply });

    if (messageCount >= 1) {
      downloadButton.classList.remove("disabled-button");
      downloadButton.removeAttribute("disabled");
    }
  });

  function appendMessage(sender, text, isInstant = false) {
    const wrapper = document.createElement("div");
    const isUser = sender === "You";
    wrapper.className = `flex ${isUser ? "justify-end" : "justify-start"} w-full`;

    const bubble = document.createElement("div");
    bubble.className = `fade-in ${isUser ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-900"} rounded-lg px-4 py-2 w-[95%] whitespace-pre-wrap shadow`;

    const nameSpan = document.createElement("strong");
    nameSpan.className = "block text-sm font-semibold mb-1";
    nameSpan.textContent = sender;

    const textSpan = document.createElement("span");

    if (isInstant) {
      textSpan.textContent = text;
    } else {
      let index = 0;
      typingInterval = setInterval(() => {
        if (stopTyping || index >= text.length) {
          clearInterval(typingInterval);
          return;
        }
        textSpan.textContent += text[index];
        index++;
      }, 15);
    }

    bubble.appendChild(nameSpan);
    bubble.appendChild(textSpan);
    wrapper.appendChild(bubble);
    log.appendChild(wrapper);
    log.scrollTop = log.scrollHeight;
  }

  function showThinkingBubble() {
    thinkingBubble = document.createElement("div");
    thinkingBubble.className = "flex justify-start w-full fade-in";

    const bubble = document.createElement("div");
    bubble.className = "bg-gray-100 text-gray-900 rounded-lg px-4 py-2 w-[95%] shadow flex flex-col items-start";

    const nameSpan = document.createElement("strong");
    nameSpan.className = "block text-sm font-semibold mb-1";
    nameSpan.textContent = "Navigator";

    const thinkingText = document.createElement("span");
    thinkingText.className = "text-gray-500 text-base";
    thinkingText.textContent = "Product Coach is thinking...";

    const progressBar = document.createElement("div");
    progressBar.className = "mt-2 w-full bg-gray-200 rounded-full h-2.5 overflow-hidden relative";
    const progress = document.createElement("div");
    progress.className = "absolute bg-blue-400 h-2.5 animate-progress";
    progress.style.width = "40%";

    progressBar.appendChild(progress);
    bubble.appendChild(nameSpan);
    bubble.appendChild(thinkingText);
    bubble.appendChild(progressBar);
    thinkingBubble.appendChild(bubble);
    log.appendChild(thinkingBubble);
    log.scrollTop = log.scrollHeight;
  }

  function removeThinkingBubble() {
    if (thinkingBubble) {
      thinkingBubble.remove();
      thinkingBubble = null;
    }
  }

  // âœ… PDF Download Logic (unchanged)
  downloadButton.addEventListener("click", async () => {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF("p", "pt", "letter");

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let y = 80;

    pdf.setFont("Helvetica");

    pdf.setFontSize(20);
    pdf.setTextColor(0, 0, 0);
    pdf.text("Product Dev Chat", pageWidth / 2, 40, { align: "center" });

    pdf.setFontSize(12);
    pdf.setTextColor(80, 80, 80);
    pdf.text("Generated by the Product Coach at JoshAdams.io/product-coach", pageWidth / 2, 60, { align: "center" });

    const timestamp = new Date().toLocaleString("en-US", { dateStyle: "medium", timeStyle: "short" });
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Downloaded: ${timestamp}`, pageWidth / 2, 75, { align: "center" });

    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);

    const messages = document.querySelectorAll("#chat-log > div");

    messages.forEach((wrapper) => {
      const name = wrapper.querySelector("strong")?.textContent || "";
      const content = wrapper.querySelector("span")?.textContent || "";

      if (y > pageHeight - 80) {
        addPageNumber(pdf);
        pdf.addPage();
        y = 50;
      }

      pdf.setFont(undefined, "bold");
      pdf.text(name, 50, y);
      y += 16;

      pdf.setFont(undefined, "normal");
      const lines = pdf.splitTextToSize(content, 500);
      pdf.text(lines, 60, y);
      y += lines.length * 14 + 10;
    });

    addPageNumber(pdf);
    pdf.save("Product-Dev-Chat.pdf");

    function addPageNumber(doc) {
      const pageCount = doc.internal.getNumberOfPages();
      const pageCurrent = doc.internal.getCurrentPageInfo().pageNumber;

      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text(`Page ${pageCurrent} of ${pageCount}`, pageWidth / 2, pageHeight - 30, { align: "center" });
      doc.setTextColor(0, 0, 0);
    }
  });
});
